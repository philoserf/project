// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/.gitignore
// data/CHANGELOG.md
// data/CODE_OF_CONDUCT.md
// data/CONTRIBUTING.md
// data/LICENSE
// data/PULL_REQUEST_TEMPLATE.md
// data/_config.yml
// data/bug_report.md
// data/feature_request.md
// data/index.md
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGitignore = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\xcf\x4a\x4d\x2e\xe1\x02\x04\x00\x00\xff\xff\x3c\x7a\x4a\x75\x08\x00\x00\x00"

func dataGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dataGitignore,
		"data/.gitignore",
	)
}

func dataGitignore() (*asset, error) {
	bytes, err := dataGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.gitignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataChangelogMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\x28\x33\xd0\x33\xd0\x33\x50\xd0\x28\xcd\x2b\x4a\xcd\x49\x4d\x2c\x4e\x4d\xd1\xe4\xe2\xd2\x55\xf0\xcc\xcb\x2c\xc9\x4c\xcc\x51\x48\xce\xcf\xcd\xcd\x2c\xe1\x02\x04\x00\x00\xff\xff\x52\x74\x99\x3b\x29\x00\x00\x00"

func dataChangelogMdBytes() ([]byte, error) {
	return bindataRead(
		_dataChangelogMd,
		"data/CHANGELOG.md",
	)
}

func dataChangelogMd() (*asset, error) {
	bytes, err := dataChangelogMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CHANGELOG.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCode_of_conductMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\x41\x4e\xc4\x30\x10\x44\xd1\xbd\x4f\x51\x52\xb6\x28\x27\x40\x08\x69\xc4\x82\x2d\xe2\x02\x6d\xbb\x86\x58\xe3\xb8\xad\x76\x1b\xc8\xed\x47\xc9\xbe\xea\xfd\x05\x37\xcd\x84\xde\x71\xd3\x96\x67\xf2\x10\x96\x05\x1f\xff\x9d\xc9\xc5\x8b\xb6\x11\xc2\xb7\x51\x1c\xea\x1b\x0d\x9d\xda\x2b\x21\x03\x87\x4e\xfc\xe9\xac\x19\xb5\x3c\x08\x57\x44\xc2\xcf\x29\xf3\x0b\xd4\x10\xe9\x4e\x5b\x2f\xf0\x8b\x5d\xcd\x4b\xfb\x09\xe1\xb3\x0d\x97\x96\x38\xce\xe8\x6c\x92\x12\xbb\x4b\xac\x44\xe4\x26\xbf\x45\x0d\xbb\x1c\x27\x66\xd7\x89\x19\xf1\x40\xd2\xe6\x92\x2e\xe1\x75\x17\x7b\xbc\xf7\xad\x54\x1d\xb4\xfb\x9a\x74\x7f\x5b\xc3\x33\x00\x00\xff\xff\x32\xbb\x17\xd2\xc9\x00\x00\x00"

func dataCode_of_conductMdBytes() ([]byte, error) {
	return bindataRead(
		_dataCode_of_conductMd,
		"data/CODE_OF_CONDUCT.md",
	)
}

func dataCode_of_conductMd() (*asset, error) {
	bytes, err := dataCode_of_conductMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CODE_OF_CONDUCT.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataContributingMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x4d\x6a\x2b\x31\x10\x84\xf7\x7d\x8a\x82\xb7\xb6\x78\xe3\xfc\x6f\x33\x4e\x82\x37\x36\x04\x7b\x6d\x14\xa9\xad\x11\xb6\xd4\x63\xb5\x84\xc9\x2e\x77\xc8\x0d\x73\x92\xe0\x81\x84\x6c\x3f\xbe\x6e\xaa\xea\x1f\x7a\xc9\xb5\xc4\xb7\x56\x63\x0e\x44\x9d\x01\xf6\x52\x0e\x34\x37\x40\x61\xeb\xd1\xaf\x57\x9b\xd7\xe5\xe3\x76\xb3\x5c\xbd\x98\xe4\x61\xf3\x85\x2d\x9e\x76\xeb\xe7\x5d\xbf\x5e\x2d\xb6\xfd\xc6\x24\x4f\x57\x17\xbf\x65\xd4\x81\x51\x59\xab\xd2\xb5\x01\x42\x91\xc3\x84\x9c\x78\xa6\x1b\x03\xb8\xc2\xb6\x32\x6c\x46\x54\x6d\x4c\xb7\x06\x48\xf6\xc0\x50\x49\x0c\x37\xd8\x1c\x58\xe9\xce\x00\xe7\x12\x2f\x22\x82\x88\x87\x93\x94\x62\x45\x62\x55\x1b\x98\xee\xff\x7c\xc2\xd8\x8e\x47\x14\x3e\x35\xd6\x4a\x0f\x53\x6e\x1d\x25\x7b\x54\xf9\x39\x50\xea\xfe\x1b\xe8\xa9\x59\x1d\xa6\x06\x21\x56\x8c\x4d\x07\x7c\x7d\x7c\xee\xa5\x38\x9e\x9d\x63\x1d\x66\x47\xb6\xca\xd4\x75\x06\xca\x8c\x77\x69\x05\xee\x77\x1f\xc9\x48\x5c\x02\x7b\xea\xe6\x06\x63\x11\x1d\xb9\xd0\x77\x00\x00\x00\xff\xff\x23\xd7\xf5\xe0\x42\x01\x00\x00"

func dataContributingMdBytes() ([]byte, error) {
	return bindataRead(
		_dataContributingMd,
		"data/CONTRIBUTING.md",
	)
}

func dataContributingMd() (*asset, error) {
	bytes, err := dataContributingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CONTRIBUTING.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLicense = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4b\x8e\xe3\x36\x14\xdc\xf3\x14\xb5\x4c\x00\xa5\xf3\x59\x05\xd9\xb1\x2d\xda\x22\x22\x93\x06\x49\x8f\xe3\x25\x2d\xd1\x16\x13\x99\x34\x44\x3a\x0d\xef\xfa\x20\x33\x07\xc8\x35\x72\x94\x3e\x49\x40\xd9\x33\x3d\x99\x15\x01\xbe\x57\x55\xaf\xaa\x16\xf1\x72\x9b\xfc\x69\xc8\xf8\xf7\x1f\xfc\xf2\xd3\xcf\xbf\xe2\x70\xc3\xda\x4e\x7f\x81\xde\xdc\x94\x08\xd9\xb8\xe9\xec\x53\xf2\x31\xc0\x27\x0c\x6e\x72\x87\x1b\x4e\x93\x0d\xd9\xf5\x15\x8e\x93\x73\x88\x47\x74\x83\x9d\x4e\xae\x42\x8e\xb0\xe1\x86\x8b\x9b\x52\x0c\x88\x87\x6c\x7d\xf0\xe1\x04\x4b\xba\x78\xb9\x95\xcd\x3c\xf8\x84\x14\x8f\xf9\xc5\x4e\x0e\x36\xf4\xb0\x29\xc5\xce\xdb\xec\x7a\xf4\xb1\xbb\x9e\x5d\xc8\x36\x17\xbd\xa3\x1f\x5d\xc2\x77\x79\x70\xe4\xed\xf5\xa3\x7e\x60\xde\x5e\x3f\x7d\x3f\x0b\xf5\xce\x8e\xf0\x01\x79\x70\xf8\x3c\xc4\x8b\xcf\x43\xbc\x66\x4c\x2e\xe5\xc9\x77\x85\xa7\x82\x0f\xdd\x78\xed\x7d\x38\x91\xcf\xe3\xd1\x9f\xfd\x43\xa5\xc0\xe7\x04\x52\x21\xbd\x26\x57\xa1\xdc\x5a\xe1\x1c\x7b\x7f\x2c\xaf\x9b\xad\x5d\xae\x87\xd1\xa7\xa1\x22\xbd\x2f\xd4\x87\x6b\x76\x15\x52\xf9\xec\x5c\x28\x28\x1b\xfa\x1f\xe3\x84\xe4\xc6\xb1\x30\x78\x97\xee\x7e\xdf\xaf\x9b\x77\x90\x23\xb9\x94\x50\xf3\x23\xa6\x59\xf7\x65\x88\xe7\xff\x3b\xf1\x09\xc7\xeb\x14\x7c\x1a\x5c\x3f\xdb\x8d\x48\x71\x56\xfc\xd3\x75\xb9\xb0\x94\xf5\x63\x1c\xc7\xf8\x52\x22\xee\x62\xe8\x7d\x71\x94\x7e\x23\xc4\x0c\x0e\xf6\x10\xff\x76\xb3\x97\x7b\xc1\x21\x66\xdf\xdd\x23\x9f\x4b\xb8\xbc\x37\xfb\x18\xa5\xc1\x8e\x23\x0e\xee\x11\x98\xeb\x89\x0f\xb0\x5f\xd9\x99\x8a\x7c\xca\x36\x64\x6f\x47\x5c\xe2\x34\xeb\x7d\x6b\xf3\x89\x10\xd3\x30\x68\xb9\x34\x3b\xaa\x18\xb8\xc6\x46\xc9\x0f\xbc\x66\x35\xde\x5e\x3f\x52\x0d\xae\xdf\x5e\x3f\x55\xd8\x71\xd3\xc8\xad\xc1\x8e\x2a\x45\x85\xd9\x43\x2e\x41\xc5\x1e\xbf\x73\x51\x57\x60\x7f\x6c\x14\xd3\x9a\x48\x05\xbe\xde\xb4\x9c\xd5\x15\xb8\x58\xb4\xdb\x9a\x8b\x15\x9e\xb7\x06\x42\x1a\xb4\x7c\xcd\x0d\xab\x61\x24\x8a\xe8\x83\x8a\x33\x0d\xb9\x24\x6b\xa6\x16\x0d\x15\x86\x3e\xf3\x96\x9b\x7d\x85\x25\x37\x82\x69\x8d\xa5\x54\xa0\xd8\x50\x65\xf8\x62\xdb\x52\x85\xcd\x56\x6d\xa4\x66\xa0\xa2\x86\x90\xe2\x07\x2e\x96\x8a\x8b\x15\x5b\x33\x61\x9e\x08\x17\x10\x12\xec\x03\x13\x06\xba\xa1\x6d\x3b\x6b\xd1\xad\x69\xa4\xd2\x90\x0a\x0b\xb9\xd9\x2b\xbe\x6a\x0c\x1a\xd9\xd6\x4c\x69\x3c\x33\xb4\x9c\x3e\xb7\xec\xae\x25\xf6\x64\xd1\x52\xbe\xae\x50\xd3\x35\x5d\xb1\x19\x25\x4d\xc3\xd4\xbc\xf6\x38\x6f\xd7\xb0\xf9\x8b\x0b\x50\x01\xba\x30\x5c\x8a\x12\xca\x42\x0a\xa3\xe8\xc2\x54\xc4\x48\x65\xbe\x40\x77\x5c\xb3\x0a\x54\x71\x5d\x12\x59\x2a\xb9\xae\x50\xf2\x94\xcb\xb2\xc2\x45\xc1\x09\x76\x67\x29\x59\x97\xab\xc9\x97\x5a\xa4\x9a\x5d\x6c\x35\x7b\xbf\xa5\x66\xb4\xe5\x62\xa5\x0b\xf8\xeb\x0e\x9f\xc8\x7f\x01\x00\x00\xff\xff\xd6\xc0\x68\xf8\x29\x04\x00\x00"

func dataLicenseBytes() ([]byte, error) {
	return bindataRead(
		_dataLicense,
		"data/LICENSE",
	)
}

func dataLicense() (*asset, error) {
	bytes, err := dataLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/LICENSE", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPull_request_templateMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\x08\xc8\x49\x4d\x2c\x4e\x55\x28\x49\xcd\xc9\x51\x48\x2d\x4b\x2d\xaa\xcc\xcf\x4b\x55\x88\x0f\xcf\xa8\xb4\x8f\x57\x48\xcc\x4b\x51\x28\xc9\x48\xcd\x53\x48\xad\x28\xc8\x49\xcc\xcc\x03\x71\x40\x72\x89\x25\xf6\xf1\x0a\xba\xba\x76\x5c\x80\x00\x00\x00\xff\xff\xf3\x07\xdd\xd2\x42\x00\x00\x00"

func dataPull_request_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_dataPull_request_templateMd,
		"data/PULL_REQUEST_TEMPLATE.md",
	)
}

func dataPull_request_templateMd() (*asset, error) {
	bytes, err := dataPull_request_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/PULL_REQUEST_TEMPLATE.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _data_configYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xc9\x48\xcd\x4d\xb5\x52\xc8\x4a\xcd\xae\xcc\xc9\xd1\x05\xf3\x74\x13\x8b\x92\x33\x32\x4b\x52\x93\x4b\x00\x01\x00\x00\xff\xff\x7a\x86\xdc\x61\x1d\x00\x00\x00"

func data_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_data_configYml,
		"data/_config.yml",
	)
}

func data_configYml() (*asset, error) {
	bytes, err := data_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/_config.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataBug_reportMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xca\x4b\xcc\x4d\xb5\x52\x70\x2a\x4d\x57\x28\x4a\x2d\xc8\x2f\x2a\xe1\x4a\x4c\xca\x2f\x2d\xb1\x52\x70\x2e\x4a\x4d\x2c\x49\x55\x48\x84\x0a\x2b\x94\xe4\x2b\x64\xa4\xe6\x14\x28\x94\x16\x2b\x64\xe6\x16\x14\xe5\x97\xa5\x72\x71\x81\xf4\x73\x71\x01\x02\x00\x00\xff\xff\x47\x69\xcb\x5a\x46\x00\x00\x00"

func dataBug_reportMdBytes() ([]byte, error) {
	return bindataRead(
		_dataBug_reportMd,
		"data/bug_report.md",
	)
}

func dataBug_reportMd() (*asset, error) {
	bytes, err := dataBug_reportMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bug_report.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFeature_requestMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcc\x5d\x11\x84\x30\x0c\x04\xe0\xf7\xa8\x58\x03\x35\x50\x01\x67\xe0\x14\x04\x58\x4a\x99\xa1\x85\xfc\xf8\x67\x30\xf0\x95\x52\x64\xe8\xc5\x8a\x1f\x35\xd2\x08\xe3\x93\xf4\x10\x5d\x66\x46\xc5\x3f\x5b\xa3\x07\x74\xa0\x6f\x54\xec\xd3\x10\x47\x77\xdc\x36\x4f\xae\x21\xf2\x11\x22\x6f\x00\x00\x00\xff\xff\x1f\xdc\xfe\x45\x49\x00\x00\x00"

func dataFeature_requestMdBytes() ([]byte, error) {
	return bindataRead(
		_dataFeature_requestMd,
		"data/feature_request.md",
	)
}

func dataFeature_requestMd() (*asset, error) {
	bytes, err := dataFeature_requestMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/feature_request.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x8e\xe3\xc6\x11\xbe\xf7\x53\x54\xac\x1c\x46\x00\x45\xed\xe6\x07\x88\xd7\x70\x80\x89\x2c\xdb\x13\xd8\x33\x8b\x1d\x0d\x82\x40\x10\x56\x25\x76\x89\xec\xa8\xd9\xcd\x54\x17\x25\x2b\x27\x3f\x44\x2e\x79\x3d\x3f\x49\x50\x4d\x71\x46\xc8\x62\x27\xb0\x2e\x64\x75\xfd\xf2\xab\xaf\xaa\x35\x81\xf7\x1f\x1e\xfe\xba\x5c\xac\x8c\xf9\x33\xec\x7c\xcf\x3b\x63\xd6\xbf\x59\x7f\xa0\x2e\xb2\x98\x05\xb2\xdd\xdc\x34\x22\x5d\x7a\x37\x9f\xd7\x91\xf3\x71\x85\x6c\xcb\x2a\xb6\xf3\x1d\xda\x9a\xe6\xb5\x93\xa6\xdf\xe5\x83\xae\x71\x3e\x26\xe2\xfd\xbc\xe3\xf8\x0f\xaa\x64\xfa\x8a\xf7\x20\xbe\xee\xae\xb5\x7c\x17\x6d\xac\x5e\xe2\xb8\xb6\x2e\x53\xe3\xc8\xdb\x54\xba\x38\xd6\xa0\x36\x33\xa6\x3d\x31\x85\x8a\x66\x3b\xdf\x53\x99\x8e\xf5\x25\x7f\x4e\x6f\x63\x55\x46\xae\xff\x7f\xc2\x0f\xe4\x09\x13\x7d\x36\xe5\x10\x60\xce\x83\xd9\xa7\x41\xae\x12\xe7\x0f\x7f\x25\xdf\x18\x24\xcd\x3d\x0a\xa5\x21\xff\xa3\xe0\xce\x79\x27\xe7\x77\xcb\x9f\x3a\x62\xd7\x52\x10\xf4\x2f\x01\x5b\x4c\x42\xdc\xba\x60\x53\x79\x09\xee\xe2\x3c\x8d\x5e\x73\xba\xf2\xfa\x9f\x5a\x7e\x95\x6b\x23\xad\x9f\x1a\x73\x0b\x1d\x32\xd6\x8c\x5d\x03\x55\x0c\x82\x2e\xb8\x50\x83\x25\x41\xe7\x13\x60\x48\x27\x62\x17\xea\x02\x5c\x80\x9a\x02\x31\x7a\xd0\x2c\xe9\x2b\x38\x35\xb1\x80\x53\x83\x52\x98\x53\x43\x4c\x17\x01\x4e\xcd\xb9\x00\x0c\x16\x9a\x78\x2a\x8d\x79\x5b\xc2\xfa\x29\x61\x4d\x9b\x9b\x49\xaf\xcf\xa9\xf9\x5d\x09\xeb\xbb\x90\x04\xbd\x47\x71\x31\x6c\x6e\x26\xee\x4a\x9c\x9a\xdf\x97\xb0\x5e\xc4\x20\xec\x76\xbd\xb8\x50\x6f\x6e\x26\xd5\x95\x38\x35\x00\xa0\x71\x57\x94\x2e\x6a\x19\xde\xb2\x46\xc3\x3f\x48\x43\xbc\xb9\x99\x44\x7d\x4e\xcd\x1f\x4a\x58\xff\xe0\x2a\x0a\xda\xfa\x89\x1f\xde\xa6\xe6\x8f\x25\xac\x6f\x77\xb1\x97\xcd\xcd\x04\xf5\xf9\x12\xb9\x21\x78\x3f\xf4\x51\xa3\x37\x34\x7b\x66\xd1\x25\x83\x5a\xdc\xf6\xd2\x44\xbe\x18\x60\x16\xa6\xc6\x4c\x26\x90\x3f\xd8\x98\xe5\x4f\xd8\x76\x9e\x12\xc4\xbd\xa2\x01\x12\xa1\x4f\x04\xd2\x10\x8c\x7c\x82\x6f\x23\x03\x0d\x76\x5f\x41\x15\xdb\x56\xa1\xf3\x2e\x10\xb8\xd0\xf5\xa2\x4d\xb0\x26\xf6\xa2\xef\xa5\x31\xdb\xed\x36\x35\xe4\xbd\xf9\xed\x18\x02\xd6\xb3\xd9\xde\x63\xfd\x66\xa3\x6f\xc8\xf5\x9b\xaf\x8f\xe8\x7b\xda\x40\x96\xde\x7e\xcd\xf4\xcf\xde\x31\xd9\x2b\x97\xd9\xac\x21\xdf\x19\x33\xca\x36\x52\x02\x69\x5c\x32\x66\x50\xc1\xf8\x4b\x4d\x24\xc8\x7d\x33\x97\x34\xa3\x26\x76\xda\x2c\xf4\xef\x20\x49\xbf\xdf\x43\x06\x10\xb2\x89\xb9\xd4\x61\x69\x8f\xbd\x97\xcf\x98\xaa\x89\xb9\xd4\xf8\x45\x56\x7c\x01\x63\xad\x9f\x58\xbe\xd5\x2f\xcf\xd8\x5e\x33\xc7\x98\x45\x0c\x95\x4b\x0a\x56\x12\xee\x2b\x3d\x84\x18\x2e\x10\xeb\xce\x60\xb2\xd0\x12\x86\xdc\x84\x6b\x9a\x95\xf0\x9e\xb8\xc1\x2e\xc1\xc9\x49\x63\xd0\x0b\x71\x40\x71\x47\xca\x38\xef\x98\x4e\xa3\x3d\xbc\x0c\xb7\x60\x37\x0e\xf8\xd6\x98\xc8\xc6\x6c\xeb\x08\x35\x09\xbc\xb6\x0b\x86\xca\xaf\x29\x6d\xcc\x0c\x12\x11\xa0\x4f\x11\xb6\x8b\x87\xfb\xd5\x87\xbb\xbf\x3c\xad\xee\xee\xbf\x2b\x5b\xbb\xcd\xf3\xb3\x5d\x3c\x7c\xb3\xfc\x18\xbf\xfd\xb8\x78\xb8\xff\xe6\x69\xb1\x52\x85\xc6\x99\xc0\x85\xf7\xc6\x2c\x8f\xc4\x67\x69\x74\x66\x11\x9e\x47\x24\x32\x04\x22\x9b\x94\x6f\x87\x30\xf0\x8e\xfb\x70\xcd\xbb\x5f\x7e\xfe\x4f\x02\x1d\x9a\x54\x9a\xbb\x50\xf9\xde\x66\xbc\x32\xfc\xc9\x09\xa5\x02\x5a\x3c\x10\x08\xa6\x43\x2a\x20\xf5\x9d\x2e\x74\x48\x15\xbb\x4e\x52\xa1\x04\x95\x02\x92\x9c\x3d\x15\xd0\x07\x27\x46\x2b\x76\x41\xa8\xe6\x8c\xee\x18\xdc\xbc\xe7\x78\x74\x96\x46\x8e\xe7\x36\x68\x21\xaa\x87\x3d\x63\x4b\xa7\xc8\x87\x62\x90\x5d\x38\xc6\x2a\xfb\x17\x50\x33\x51\xc8\x40\x28\x77\xb3\x9a\x29\xf5\x5e\x52\x09\xb7\x8a\x5a\xf7\x1c\xb9\xa3\x4a\xb2\x57\x8e\x7e\x85\x83\x16\xa0\x80\xe5\x75\x90\x7b\x70\xd9\x02\xc6\xac\x1a\x97\x9e\xe7\xc1\xa9\xa3\x5e\x30\x56\xb1\x3a\xc7\x1e\xfa\x60\x89\x01\x03\xfc\x78\xb7\x82\xcb\xc2\x28\xc7\xa6\x69\xfd\xdb\x1f\xee\x16\xcb\xfb\xc7\xe5\x16\xf6\xce\x53\x8e\x9d\x57\xc9\xa5\x43\x2f\xfb\x43\x9d\x5c\x48\x9d\x1b\x80\x31\x33\xa8\x98\xac\x93\x64\x66\x70\x4d\xba\x17\xc7\x61\xad\x18\xf3\x23\xf2\x41\x4b\x43\x68\xfa\x16\x03\xec\xc8\x85\xba\x84\xef\x09\xbc\x3a\xe8\x4e\x5e\xda\x36\x06\x9b\x0a\x40\x48\xad\x32\x55\xe2\x29\xa8\xe2\x6f\x98\x94\x16\x12\x83\x79\x14\x14\xfa\xe5\xe7\x7f\x3f\x05\x27\x64\x21\x8b\x19\xa8\xdb\x96\xd8\x55\x58\xc2\xf7\x2e\x41\x13\x5b\x1a\x21\x4d\xf9\x0b\xd1\x1e\x31\x08\xd6\x83\x31\x9a\x9a\x09\x05\x2a\x27\xe7\xdc\x95\x31\x63\x15\x51\x87\xe4\x39\x33\x02\x53\xad\x0c\x08\x94\xc4\x93\x85\x1d\xc9\x49\x5b\xd9\xc6\x3e\xdf\x30\x86\x31\xd4\xca\x30\xeb\x34\x99\x85\xdd\x39\xe7\x7b\x44\xef\x52\x03\x8f\x84\xc5\x98\x80\xd8\x0d\xd9\xf7\x4c\xa9\x39\xa1\x10\x83\xc7\x03\x0d\x5b\x91\xdd\x91\x38\x95\x90\x71\x52\x48\x94\x81\x70\x27\xe8\xcf\xb0\x8f\x0c\x08\x67\x42\xd6\x33\x0d\x4f\xc8\xfe\x0c\x6f\xbf\xfc\xd3\x9b\xec\xad\xc7\xab\x9e\x0f\x74\x36\x9f\xb7\xfd\xf2\x4d\xca\x78\x13\x72\x20\xad\xc8\x92\xd2\x52\xcd\xba\xe8\x9d\xb8\x0a\x3d\xa4\xca\xe9\x1f\x13\x83\x92\xbb\xf7\x14\x72\x59\x19\x26\x81\x5b\xbf\xc3\x70\x2e\x06\xd4\xaf\x75\x71\x0f\xf7\x74\x82\xbf\x47\x3e\x94\xb0\x8a\x16\xcf\xd0\x90\xd1\x59\x48\xba\xc0\x2a\x1f\x7b\x3b\x1b\xa8\xa1\xd7\x42\x97\xb7\x06\x08\x55\x4d\x88\x3e\xd6\x6e\xe8\xff\x23\xa1\x88\x27\x78\x7a\xbc\x2d\x8d\xf9\xa8\xf9\x8f\x8e\x4e\x49\x87\x82\x29\x25\xb2\xa0\x77\x33\x20\x13\x28\xe1\xe3\x29\x94\x5a\xe5\x39\x9f\x84\x28\x40\xc1\x46\x4e\x64\x0b\xc0\x4e\xdb\x4f\xb6\x30\x91\x81\x49\xe3\x0c\xcd\xc1\x70\x86\x7c\x91\x42\x47\x9c\x74\xc1\x32\x44\xae\x31\xb8\x7f\x0d\x9b\xf4\xa3\xf9\x6f\x00\x00\x00\xff\xff\x9f\x1f\xc2\x6e\x6c\x0a\x00\x00"

func dataIndexMdBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexMd,
		"data/index.md",
	)
}

func dataIndexMd() (*asset, error) {
	bytes, err := dataIndexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.gitignore":               dataGitignore,
	"data/CHANGELOG.md":             dataChangelogMd,
	"data/CODE_OF_CONDUCT.md":       dataCode_of_conductMd,
	"data/CONTRIBUTING.md":          dataContributingMd,
	"data/LICENSE":                  dataLicense,
	"data/PULL_REQUEST_TEMPLATE.md": dataPull_request_templateMd,
	"data/_config.yml":              data_configYml,
	"data/bug_report.md":            dataBug_reportMd,
	"data/feature_request.md":       dataFeature_requestMd,
	"data/index.md":                 dataIndexMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		".gitignore":               {dataGitignore, map[string]*bintree{}},
		"CHANGELOG.md":             {dataChangelogMd, map[string]*bintree{}},
		"CODE_OF_CONDUCT.md":       {dataCode_of_conductMd, map[string]*bintree{}},
		"CONTRIBUTING.md":          {dataContributingMd, map[string]*bintree{}},
		"LICENSE":                  {dataLicense, map[string]*bintree{}},
		"PULL_REQUEST_TEMPLATE.md": {dataPull_request_templateMd, map[string]*bintree{}},
		"_config.yml":              {data_configYml, map[string]*bintree{}},
		"bug_report.md":            {dataBug_reportMd, map[string]*bintree{}},
		"feature_request.md":       {dataFeature_requestMd, map[string]*bintree{}},
		"index.md":                 {dataIndexMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
