// Code generated by go-bindata.
// sources:
// data/.gitignore
// data/CHANGELOG.md
// data/CODE_OF_CONDUCT.md
// data/CONTRIBUTING.md
// data/LICENSE
// data/PULL_REQUEST_TEMPLATE.md
// data/_config.yml
// data/bug_report.md
// data/feature_request.md
// data/index.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGitignore = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\xcf\x4a\x4d\x2e\xe1\x02\x04\x00\x00\xff\xff\x3c\x7a\x4a\x75\x08\x00\x00\x00"

func dataGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dataGitignore,
		"data/.gitignore",
	)
}

func dataGitignore() (*asset, error) {
	bytes, err := dataGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.gitignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataChangelogMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\x28\x33\xd0\x33\xd0\x33\x50\xd0\x28\xcd\x2b\x4a\xcd\x49\x4d\x2c\x4e\x4d\xd1\xe4\xe2\x52\x50\xd0\x55\xf0\xcc\xcb\x2c\xc9\x4c\xcc\x51\x48\xce\xcf\xcd\xcd\x2c\xe1\x02\x04\x00\x00\xff\xff\xe5\x9a\xa7\x04\x2b\x00\x00\x00"

func dataChangelogMdBytes() ([]byte, error) {
	return bindataRead(
		_dataChangelogMd,
		"data/CHANGELOG.md",
	)
}

func dataChangelogMd() (*asset, error) {
	bytes, err := dataChangelogMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CHANGELOG.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCode_of_conductMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\x41\x4e\xc4\x30\x10\x44\xd1\xbd\x4f\x51\x52\xb6\x28\x27\x40\x08\x69\xc4\x82\x2d\xe2\x02\x6d\xbb\x86\x58\xe3\xb8\xad\x76\x07\xc8\xed\x47\xce\xbe\xea\xfd\x05\x37\xcd\x84\xde\x71\xd3\x96\x8f\xe4\x21\x2c\x0b\x3e\xfe\x3b\x93\x8b\x17\x6d\x23\x84\x6f\xa3\x38\xd4\x37\x1a\x3a\xb5\x57\x42\x06\x4e\x3d\xf0\xa7\x47\xcd\xa8\xe5\x41\xb8\x22\x12\x3e\xa7\xcc\x2f\x50\x43\xa4\x3b\x6d\xbd\xc0\x2f\x76\x35\x2f\xed\x27\x84\xcf\x36\x5c\x5a\xe2\x98\xd1\xa3\x49\x4a\xec\x2e\xb1\x12\x91\x9b\xfc\x16\x35\xec\x72\x4e\xcc\xae\x13\x33\xe2\x89\xa4\xcd\x25\x4d\x01\xaf\xbb\xd8\xe3\xbd\x6f\xa5\xea\xa0\xdd\xd7\xa4\xfb\xdb\x1a\x9e\x01\x00\x00\xff\xff\x65\x27\xdd\x3d\xc9\x00\x00\x00"

func dataCode_of_conductMdBytes() ([]byte, error) {
	return bindataRead(
		_dataCode_of_conductMd,
		"data/CODE_OF_CONDUCT.md",
	)
}

func dataCode_of_conductMd() (*asset, error) {
	bytes, err := dataCode_of_conductMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CODE_OF_CONDUCT.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataContributingMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xcf\x6a\x72\x31\x10\xc5\xf7\xf3\x14\x07\xbe\xb5\xe1\xbb\xf6\xff\xb6\xd7\xb6\xb8\x51\x28\xba\x13\x24\x4d\xc6\xdc\xa0\xc9\x5c\x33\x09\xd2\x5d\xdf\xa1\x6f\xd8\x27\x29\x0a\x2d\xdd\xfe\x98\xdf\x70\xce\xf9\x87\x5e\x72\x2d\xf1\xad\xd5\x98\x03\x51\x67\x80\x9d\x94\x3d\x4d\x0d\x50\xd8\x7a\xf4\xcb\xc5\xea\x75\xfe\xb8\x5e\xcd\x17\x2f\x26\x79\xd8\x7c\x66\xb3\xa7\xcd\x76\xf9\xbc\xd9\xf6\xcb\xc5\x6c\xdd\xaf\x4c\xf2\x74\x75\x36\x5a\x46\x1d\x18\x95\xb5\x2a\x5d\x1b\x20\x14\xd9\x5f\x90\x13\xcf\x74\x63\x00\x57\xd8\x56\x86\xcd\x88\xaa\x8d\xe9\xd6\x00\xc9\xee\x19\x2a\x89\xe1\x06\x9b\x03\x2b\xdd\x19\xe0\x54\xe2\xf9\x10\x41\xc4\xc3\x49\x4a\xb1\x22\xb1\xaa\x0d\x4c\xf7\x7f\x3e\x61\x6c\x87\x03\x0a\x1f\x1b\x6b\xa5\x87\x4b\x72\x1d\x25\x7b\x54\xf9\x11\x94\xba\xff\x06\x7a\x6c\x56\x87\x4b\x87\x10\x2b\xc6\xa6\x03\xbe\x3e\x3e\x77\x52\x1c\x4f\x4e\xb1\x0e\x93\x03\x5b\x65\xea\x3a\x03\x65\xc6\xbb\xb4\x02\xf7\xbb\x90\x64\x24\x2e\x81\x3d\x75\x53\x83\xb1\x88\x8e\x5c\xe8\x3b\x00\x00\xff\xff\xdc\x24\xf2\xf9\x44\x01\x00\x00"

func dataContributingMdBytes() ([]byte, error) {
	return bindataRead(
		_dataContributingMd,
		"data/CONTRIBUTING.md",
	)
}

func dataContributingMd() (*asset, error) {
	bytes, err := dataContributingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CONTRIBUTING.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLicense = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4b\x8e\xe3\x36\x14\xdc\xf3\x14\xb5\x4c\x00\xa5\xf3\x59\x05\xd9\xb1\x2d\xda\x22\x22\x93\x06\x49\x8f\xe3\x25\x2d\xd1\x16\x13\x99\x34\x44\x3a\x0d\xef\xfa\x20\x33\x07\xc8\x35\x72\x94\x3e\x49\x40\xd9\x33\x3d\x99\x15\x01\xbe\x57\x55\xaf\xaa\x16\xf1\x72\x9b\xfc\x69\xc8\xf8\xf7\x1f\xfc\xf2\xd3\xcf\xbf\xe2\x70\xc3\xda\x4e\x7f\x81\xde\xdc\x94\x08\xd9\xb8\xe9\xec\x53\xf2\x31\xc0\x27\x0c\x6e\x72\x87\x1b\x4e\x93\x0d\xd9\xf5\x15\x8e\x93\x73\x88\x47\x74\x83\x9d\x4e\xae\x42\x8e\xb0\xe1\x86\x8b\x9b\x52\x0c\x88\x87\x6c\x7d\xf0\xe1\x04\x4b\xba\x78\xb9\x95\xcd\x3c\xf8\x84\x14\x8f\xf9\xc5\x4e\x0e\x36\xf4\xb0\x29\xc5\xce\xdb\xec\x7a\xf4\xb1\xbb\x9e\x5d\xc8\x36\x17\xbd\xa3\x1f\x5d\xc2\x77\x79\x70\xe4\xed\xf5\xa3\x7e\x60\xde\x5e\x3f\x7d\x3f\x0b\xf5\xce\x8e\xf0\x01\x79\x70\xf8\x3c\xc4\x8b\xcf\x43\xbc\x66\x4c\x2e\xe5\xc9\x77\x85\xa7\x82\x0f\xdd\x78\xed\x7d\x38\x91\xcf\xe3\xd1\x9f\xfd\x43\xa5\xc0\xe7\x04\x52\x21\xbd\x26\x57\xa1\xdc\x5a\xe1\x1c\x7b\x7f\x2c\xaf\x9b\xad\x5d\xae\x87\xd1\xa7\xa1\x22\xbd\x2f\xd4\x87\x6b\x76\x15\x52\xf9\xec\x5c\x28\x28\x1b\xfa\x1f\xe3\x84\xe4\xc6\xb1\x30\x78\x97\xee\x7e\xdf\xaf\x9b\x77\x90\x23\xb9\x94\x50\xf3\x23\xa6\x59\xf7\x65\x88\xe7\xff\x3b\xf1\x09\xc7\xeb\x14\x7c\x1a\x5c\x3f\xdb\x8d\x48\x71\x56\xfc\xd3\x75\xb9\xb0\x94\xf5\x63\x1c\xc7\xf8\x52\x22\xee\x62\xe8\x7d\x71\x94\x7e\x23\xc4\x0c\x0e\xf6\x10\xff\x76\xb3\x97\x7b\xc1\x21\x66\xdf\xdd\x23\x9f\x4b\xb8\xbc\x37\xfb\x18\xa5\xc1\x8e\x23\x0e\xee\x11\x98\xeb\x89\x0f\xb0\x5f\xd9\x99\x8a\x7c\xca\x36\x64\x6f\x47\x5c\xe2\x34\xeb\x7d\x6b\xf3\x89\x10\xd3\x30\x68\xb9\x34\x3b\xaa\x18\xb8\xc6\x46\xc9\x0f\xbc\x66\x35\xde\x5e\x3f\x52\x0d\xae\xdf\x5e\x3f\x55\xd8\x71\xd3\xc8\xad\xc1\x8e\x2a\x45\x85\xd9\x43\x2e\x41\xc5\x1e\xbf\x73\x51\x57\x60\x7f\x6c\x14\xd3\x9a\x48\x05\xbe\xde\xb4\x9c\xd5\x15\xb8\x58\xb4\xdb\x9a\x8b\x15\x9e\xb7\x06\x42\x1a\xb4\x7c\xcd\x0d\xab\x61\x24\x8a\xe8\x83\x8a\x33\x0d\xb9\x24\x6b\xa6\x16\x0d\x15\x86\x3e\xf3\x96\x9b\x7d\x85\x25\x37\x82\x69\x8d\xa5\x54\xa0\xd8\x50\x65\xf8\x62\xdb\x52\x85\xcd\x56\x6d\xa4\x66\xa0\xa2\x86\x90\xe2\x07\x2e\x96\x8a\x8b\x15\x5b\x33\x61\x9e\x08\x17\x10\x12\xec\x03\x13\x06\xba\xa1\x6d\x3b\x6b\xd1\xad\x69\xa4\xd2\x90\x0a\x0b\xb9\xd9\x2b\xbe\x6a\x0c\x1a\xd9\xd6\x4c\x69\x3c\x33\xb4\x9c\x3e\xb7\xec\xae\x25\xf6\x64\xd1\x52\xbe\xae\x50\xd3\x35\x5d\xb1\x19\x25\x4d\xc3\xd4\xbc\xf6\x38\x6f\xd7\xb0\xf9\x8b\x0b\x50\x01\xba\x30\x5c\x8a\x12\xca\x42\x0a\xa3\xe8\xc2\x54\xc4\x48\x65\xbe\x40\x77\x5c\xb3\x0a\x54\x71\x5d\x12\x59\x2a\xb9\xae\x50\xf2\x94\xcb\xb2\xc2\x45\xc1\x09\x76\x67\x29\x59\x97\xab\xc9\x97\x5a\xa4\x9a\x5d\x6c\x35\x7b\xbf\xa5\x66\xb4\xe5\x62\xa5\x0b\xf8\xeb\x0e\x9f\xc8\x7f\x01\x00\x00\xff\xff\xd6\xc0\x68\xf8\x29\x04\x00\x00"

func dataLicenseBytes() ([]byte, error) {
	return bindataRead(
		_dataLicense,
		"data/LICENSE",
	)
}

func dataLicense() (*asset, error) {
	bytes, err := dataLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/LICENSE", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPull_request_templateMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\x08\xc8\x49\x4d\x2c\x4e\x55\x28\x49\xcd\xc9\x51\x48\x2d\x4b\x2d\xaa\xcc\xcf\x4b\x55\x88\x0f\xcf\xa8\xb4\x8f\x57\x48\xcc\x4b\x51\x28\xc9\x48\xcd\x53\x48\xad\x28\xc8\x49\xcc\xcc\x03\x71\x40\x72\x89\x25\xf6\xf1\x0a\xba\xba\x76\x5c\x80\x00\x00\x00\xff\xff\xf3\x07\xdd\xd2\x42\x00\x00\x00"

func dataPull_request_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_dataPull_request_templateMd,
		"data/PULL_REQUEST_TEMPLATE.md",
	)
}

func dataPull_request_templateMd() (*asset, error) {
	bytes, err := dataPull_request_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/PULL_REQUEST_TEMPLATE.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _data_configYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xc9\x48\xcd\x4d\xb5\x52\xc8\x4a\xcd\xae\xcc\xc9\xd1\x05\xf3\x74\x13\x8b\x92\x33\x32\x4b\x52\x93\x4b\x00\x01\x00\x00\xff\xff\x7a\x86\xdc\x61\x1d\x00\x00\x00"

func data_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_data_configYml,
		"data/_config.yml",
	)
}

func data_configYml() (*asset, error) {
	bytes, err := data_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/_config.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataBug_reportMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\xca\x4b\xcc\x4d\xb5\x52\x70\x2a\x4d\x57\x28\x4a\x2d\xc8\x2f\x2a\xe1\x4a\x4c\xca\x2f\x2d\xb1\x52\x70\x2e\x4a\x4d\x2c\x49\x55\x48\x84\x0a\x2b\x94\xe4\x2b\x64\xa4\xe6\x14\x28\x94\x16\x2b\x64\xe6\x16\x14\xe5\x97\xa5\x72\x71\x81\xf4\x73\x71\x01\x02\x00\x00\xff\xff\x47\x69\xcb\x5a\x46\x00\x00\x00"

func dataBug_reportMdBytes() ([]byte, error) {
	return bindataRead(
		_dataBug_reportMd,
		"data/bug_report.md",
	)
}

func dataBug_reportMd() (*asset, error) {
	bytes, err := dataBug_reportMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bug_report.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFeature_requestMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcc\x5d\x11\x84\x30\x0c\x04\xe0\xf7\xa8\x58\x03\x35\x50\x01\x67\xe0\x14\x04\x58\x4a\x99\xa1\x85\xfc\xf8\x67\x30\xf0\x95\x52\x64\xe8\xc5\x8a\x1f\x35\xd2\x08\xe3\x93\xf4\x10\x5d\x66\x46\xc5\x3f\x5b\xa3\x07\x74\xa0\x6f\x54\xec\xd3\x10\x47\x77\xdc\x36\x4f\xae\x21\xf2\x11\x22\x6f\x00\x00\x00\xff\xff\x1f\xdc\xfe\x45\x49\x00\x00\x00"

func dataFeature_requestMdBytes() ([]byte, error) {
	return bindataRead(
		_dataFeature_requestMd,
		"data/feature_request.md",
	)
}

func dataFeature_requestMd() (*asset, error) {
	bytes, err := dataFeature_requestMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/feature_request.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5f\x6f\xe3\xc6\x11\x7f\xdf\x4f\x31\x8d\xfb\xd0\x04\x12\x65\xf9\x7c\xc9\x9d\x82\x14\x70\x14\x27\x71\x91\xd8\x87\xb3\x8c\xa2\x20\x88\x68\x44\x8e\xc8\xad\x96\xbb\xec\xcc\x52\x8a\xfa\x94\x0f\xd1\x97\x7e\xbd\x7c\x92\x62\x96\xd2\x1d\x8b\xbb\x73\x51\x3f\x18\xe2\xee\xcc\x6f\x66\x7f\xf3\xf7\x02\xde\xbc\x7d\xf8\xcb\xed\x72\x65\xcc\x9f\x61\xe3\x7a\xde\x18\x93\xff\x21\xff\xb6\xb7\xae\x82\xc7\x88\xb1\x97\x22\x9f\x17\xc5\x9f\x9a\x18\x3b\x59\xcc\x66\xa5\x0b\x7d\x95\x55\x1c\x3c\x65\x36\xcc\xba\xc6\xba\x20\xc4\xdb\x59\xc7\xe1\xef\x54\xc6\xcf\x55\xfd\x2d\x75\x81\x23\x2c\x91\xab\x22\xbf\x1a\x69\xd7\x81\xd3\x55\x89\x5c\x65\x65\x68\x67\xc3\xe7\xac\xb6\xb1\xe9\x37\xe9\xe4\xe3\x88\x3f\x84\x2a\x94\x45\xfe\xe2\x84\x95\xa0\xaa\x50\x66\x81\xeb\xff\xad\xfc\x96\x1c\xa1\x50\x91\x5f\x8f\x5d\x79\x46\x6b\xc6\x83\x86\xcc\x1c\x46\x92\x01\xe5\x31\xe2\xc6\x3a\x1b\x8f\x8b\xdb\x5f\x3b\x62\xdb\x92\x8f\xe8\x8a\xfc\xe5\x08\xb4\x45\x89\xc4\xad\xf5\x95\x64\x27\x03\x36\xcc\xe4\xac\x39\xa3\x91\x66\xd6\xc4\xd6\x7d\x6e\xcc\x0d\x74\xc8\x58\x33\x76\x0d\x94\xc1\x47\xb4\xde\xfa\x1a\x2a\x8a\x68\x9d\x00\x7a\x39\x10\x5b\x5f\x4f\xc0\x7a\xa8\xc9\x13\xa3\x03\xb5\x22\x5f\xc3\xa1\x09\x13\x38\x34\x18\xf5\x3f\x31\xbd\xff\x38\x4e\x00\x7d\x05\x4d\x38\x64\xc6\xcc\x33\xc8\x9f\x04\x6b\x2a\xf2\x2f\x0b\x73\x95\x41\x7e\xe7\x25\xa2\x73\x18\x6d\xf0\x45\xfe\x55\x61\x5e\x64\x90\x2f\x83\x8f\x6c\x37\x7d\xb4\xbe\x2e\xf2\x57\x85\x01\x00\x50\xdd\x15\xc9\x70\xf6\x7a\x38\xbb\xca\x7c\xfe\x10\x1b\xe2\x22\x9f\x5f\x16\xe6\x3a\x83\xfc\x27\x5b\x92\x57\x8e\xe7\xf3\xc2\xbc\xcc\x20\xbf\xd9\x84\x3e\x16\xf9\xfc\x6a\x04\xd3\x10\xbc\x19\x18\x2e\xf2\xf9\x8b\x33\xd6\x70\x71\xd3\xc7\x26\x28\xe0\x75\x61\xcc\xc5\x05\x24\x7f\x8d\xb9\xfd\x15\xdb\xce\x91\x40\xd8\xea\x63\x20\x06\xe8\x85\x20\x36\x04\xa7\x60\x65\xf0\x7d\x60\xa0\x41\xee\x6b\x28\x43\xdb\xea\xcb\x9d\xf5\x04\xd6\x77\x7d\x94\xc4\x44\xe8\xa3\xfe\xce\x8c\x59\xaf\xd7\x20\x0d\x39\x67\xfe\x78\xc6\x80\x7c\x3a\xdd\x3a\xac\x2f\x8b\x7c\xfe\xb2\x80\xe9\x14\xb9\x9e\x7f\xc3\xf4\x8f\xde\x32\x55\x23\xb9\xe9\xb4\x21\xd7\x19\x73\xfe\xae\x02\x09\xc4\xc6\x8a\x31\xc3\x15\x9c\xff\xa4\x09\x04\x7d\x7a\xc4\x09\xfb\x7c\x13\x3a\x65\x1d\xdd\x02\x24\xf6\xdb\x2d\xa0\x32\x05\x49\xc4\x24\xcb\x97\xdf\x54\xb4\xc5\xde\xc5\x4f\x88\xaa\x88\x39\xf9\xf8\x59\xba\xf8\x0c\xce\xbe\x7e\x20\x39\xd7\xf7\x26\x46\xc7\x31\x37\x66\x19\x7c\x69\x45\x29\x92\xc8\x7d\xa9\x87\x10\xfc\x89\x58\xda\x12\x33\x55\xd0\x12\xfa\x44\xbd\x1d\xe9\x66\xf0\x86\xb8\xc1\x4e\xe0\x60\x63\x03\xe8\x22\xb1\xc7\x68\xf7\x94\xd8\xdd\x30\x1d\xce\xf2\xf0\xbe\xb4\x22\x76\xe7\xf2\x5a\x1b\x13\xd8\x98\x75\x1d\xa0\xa6\x08\xcf\x55\xe2\xe0\xf9\x38\x31\x8d\x99\x82\x10\x01\x3a\x09\xb0\x5e\x3e\xdc\xaf\xde\xde\x7d\xfb\xb4\xba\xbb\xff\x21\x6b\xab\x75\x0a\xf5\x7a\xf9\xf0\xdd\xed\x2f\xe1\xfb\x5f\x96\x0f\xf7\xdf\x3d\x2d\x57\x7a\xa1\x38\x17\x70\x4a\x64\x63\x6e\xf7\xc4\xc7\xd8\x68\xa1\x61\xaa\xba\x04\x1f\x18\x3c\x51\x25\x9a\x65\x3b\x3f\x64\x1b\xf7\x7e\x9c\x6d\xbf\xff\xf6\x6f\x01\xed\x09\x92\xc1\x9d\x2f\x5d\x5f\x25\xbe\x12\xfd\x62\x23\xc9\x04\x5a\xdc\x11\x44\x94\x9d\x4c\x40\xfa\x2e\xb5\x42\x29\xd9\x76\x51\x26\x9a\x96\x71\x02\x12\x8f\x8e\x26\xd0\x7b\x1b\x93\xc7\xd6\x47\xaa\x39\xb1\x7b\x02\x37\xe6\x0d\x87\xbd\xad\xe8\x9c\xd9\x29\x0c\xea\x88\xde\xc3\x96\xb1\xa5\x43\xe0\xdd\x64\xf8\xb6\x7e\x1f\xca\xa4\x3f\x81\x9a\x89\x7c\x82\xd5\x10\xa6\x6b\x26\xe9\x9d\xba\x7c\xa3\xac\x75\xef\x90\x3b\x2a\x63\xd2\x4a\xe8\x23\x1e\xd4\x01\x25\x2c\x55\x79\x8a\xc1\xa9\xc0\x8d\x59\x35\x56\xde\xd5\x83\x55\xc5\x2d\x25\x43\x01\x8e\xa1\x87\xde\x57\xc4\x80\x1e\x7e\xbe\x5b\x81\x1b\x94\xb2\x73\xd0\xd4\xff\xf5\x4f\x77\xcb\xdb\xfb\xc7\xdb\x35\x6c\xad\xa3\x84\x9d\x7a\xc5\x29\x42\xef\x7b\x84\x2a\x59\x2f\x9d\x1d\x88\x31\x53\x28\x99\x2a\x1b\xc5\x4c\xff\x2b\xe9\xde\x2b\x0e\x3d\xc4\x98\x9f\x91\x77\xea\x1a\x42\xd3\xb7\xe8\x61\x43\xd6\xd7\x19\xfc\x48\xe0\x54\x41\x1b\xe9\x6d\xd5\x06\x5f\xc9\x04\x10\xa4\xd5\x4c\x8d\xe1\xe0\xf5\xe2\xaf\x28\x9a\x16\x31\xf8\x34\xff\xe8\xf7\xdf\xfe\xf5\xe4\x6d\xa4\x61\x1c\x0e\x61\xb8\x69\x89\x6d\x89\x19\xfc\x68\x05\x9a\xd0\xd2\x99\x52\x49\x2f\xc4\x6a\x8f\x3e\x62\x3d\x08\xa3\x06\x04\x23\x94\x36\x1e\x53\x54\xce\x16\xcb\x80\x5a\x24\xef\x2c\x23\x30\xd5\x9a\x01\x9e\x24\x3a\xaa\x60\x43\xf1\xa0\xa1\x6c\x43\x9f\xc6\x02\x30\xfa\x5a\x33\xac\xb2\x6a\xac\x82\xcd\x31\xd9\x7b\x44\x67\xa5\x81\x47\xc2\xc9\xd9\x00\xb1\x1d\xac\x6f\x99\xa4\x39\x60\x24\x06\x87\x3b\x1a\x7a\x21\xdb\x3d\xb1\x64\x90\x78\x52\x4a\x34\x03\xe1\x2e\xa2\x3b\xc2\x36\x30\x20\x1c\x09\x59\xcf\x14\x9e\x90\xdd\x11\xe6\xaf\x5f\x5d\xca\x29\x59\x61\xd5\xf3\x8e\x9e\x93\x7d\x7d\x29\x89\x6f\x42\xf6\xa4\x1e\x55\xa4\x69\xa9\x62\x5d\x70\x36\xda\x12\x1d\x48\x69\xc9\x97\x04\x18\x53\xf4\x9e\x7c\x72\x2b\xd1\x14\xe1\xc6\x6d\xd0\x1f\x27\x03\xeb\xe3\xbb\xb0\x85\x7b\x3a\xc0\xdf\x02\xef\x32\x58\x85\x0a\x8f\xd0\x10\x68\x2d\x88\x36\xb0\xb4\xa0\x4c\x87\xd4\xd0\x61\xd0\xa5\xae\x01\x91\xca\xc6\x07\x17\x6a\x3b\xc4\xff\x91\x30\x46\x47\xf0\xf4\x78\x93\x19\xf3\x85\xda\xdf\x5b\x3a\x88\x16\x05\x93\x08\x55\xa0\x03\x15\x90\x09\x34\xe1\xc3\xc1\x67\xea\xe5\x31\x9d\xf8\x10\x81\x7c\x15\x58\xa8\x9a\x00\x76\x1a\x7e\xfd\x15\x18\x98\x14\x67\x08\x0e\xfa\x23\x04\xad\x20\xe8\x88\x45\x1b\x2c\x43\xe0\x1a\xbd\xfd\xe7\xd0\x49\xbf\x30\xc6\xe4\xf3\x62\x01\x9f\x58\xaf\xb0\xb3\xb3\x0d\x56\x35\xc9\x47\x96\x14\x49\xeb\x59\x26\xfb\xda\xe4\x57\x23\x8c\x0f\x96\xac\x84\xf0\xec\xc2\x63\xf2\x17\x23\x00\xdb\xd6\x99\x34\x96\x5c\x25\xea\xc4\x49\x5d\xf7\xad\x69\x9a\x0c\x1a\xb4\xe9\xc6\xf5\x34\xd8\xbe\xfe\xb4\xea\x60\xf3\xbc\x4e\x7d\x68\x77\x00\x78\x39\x02\xf8\xbf\x36\xa8\xa4\xfd\x65\xb1\x80\x8b\x61\xd0\xe6\x5f\xe9\xef\xf1\xac\x32\xf9\x2b\x3d\x2a\xc7\x03\x24\x7f\xad\x47\xf1\x34\x0a\x74\x83\x59\xc0\x45\x0a\x93\xd1\xed\x65\x01\x17\xa7\xb6\x65\x74\x7b\x59\xc0\x45\x9a\xa5\x46\x37\x16\xd5\x6b\x68\xfa\x8e\xb5\xf9\xf5\xf9\x08\x87\xd6\xa3\xeb\xc3\x42\xb7\x89\x34\xc6\xf7\xe8\x7a\x2a\xcc\x7f\x02\x00\x00\xff\xff\x84\x78\x24\xe6\x65\x0b\x00\x00"

func dataIndexMdBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexMd,
		"data/index.md",
	)
}

func dataIndexMd() (*asset, error) {
	bytes, err := dataIndexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.gitignore":               dataGitignore,
	"data/CHANGELOG.md":             dataChangelogMd,
	"data/CODE_OF_CONDUCT.md":       dataCode_of_conductMd,
	"data/CONTRIBUTING.md":          dataContributingMd,
	"data/LICENSE":                  dataLicense,
	"data/PULL_REQUEST_TEMPLATE.md": dataPull_request_templateMd,
	"data/_config.yml":              data_configYml,
	"data/bug_report.md":            dataBug_reportMd,
	"data/feature_request.md":       dataFeature_requestMd,
	"data/index.md":                 dataIndexMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		".gitignore":               {dataGitignore, map[string]*bintree{}},
		"CHANGELOG.md":             {dataChangelogMd, map[string]*bintree{}},
		"CODE_OF_CONDUCT.md":       {dataCode_of_conductMd, map[string]*bintree{}},
		"CONTRIBUTING.md":          {dataContributingMd, map[string]*bintree{}},
		"LICENSE":                  {dataLicense, map[string]*bintree{}},
		"PULL_REQUEST_TEMPLATE.md": {dataPull_request_templateMd, map[string]*bintree{}},
		"_config.yml":              {data_configYml, map[string]*bintree{}},
		"bug_report.md":            {dataBug_reportMd, map[string]*bintree{}},
		"feature_request.md":       {dataFeature_requestMd, map[string]*bintree{}},
		"index.md":                 {dataIndexMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
