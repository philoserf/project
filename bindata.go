// Code generated by go-bindata.
// sources:
// data/.gitignore
// data/CHANGELOG.md
// data/CODE_OF_CONDUCT.md
// data/CONTRIBUTING.md
// data/ISSUE_TEMPLATE.md
// data/LICENSE
// data/PULL_REQUEST_TEMPLATE.md
// data/README.md
// data/_config.yml
// data/index.md
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGitignore = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\xcf\x4a\x4d\x2e\xe1\x02\x04\x00\x00\xff\xff\x3c\x7a\x4a\x75\x08\x00\x00\x00"

func dataGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dataGitignore,
		"data/.gitignore",
	)
}

func dataGitignore() (*asset, error) {
	bytes, err := dataGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.gitignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataChangelogMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\x28\x33\xd0\x33\xd0\x33\x50\xd0\x28\xcd\x2b\x4a\xcd\x49\x4d\x2c\x4e\x4d\xd1\xe4\xe2\xd2\x55\xf0\xcc\xcb\x2c\xc9\x4c\xcc\x51\x48\xce\xcf\xcd\xcd\x2c\xe1\x02\x04\x00\x00\xff\xff\x52\x74\x99\x3b\x29\x00\x00\x00"

func dataChangelogMdBytes() ([]byte, error) {
	return bindataRead(
		_dataChangelogMd,
		"data/CHANGELOG.md",
	)
}

func dataChangelogMd() (*asset, error) {
	bytes, err := dataChangelogMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CHANGELOG.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCode_of_conductMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc9\xb1\x0d\x84\x30\x14\x03\xd0\x3e\x53\x58\xba\xf6\x98\x22\x93\x24\xc4\x28\x34\x58\xfa\xdf\x11\x62\x7b\x0a\xea\xf7\x43\xd5\x20\x74\xa0\xea\x1a\x6b\x77\x29\x1b\x1c\x6c\x86\x3c\x19\x89\x96\x78\xb4\x70\x9f\x39\x61\xa1\xf3\x63\x8e\x3f\x14\xe8\xb4\x19\xe5\x0d\x00\x00\xff\xff\x53\x17\x36\xaa\x47\x00\x00\x00"

func dataCode_of_conductMdBytes() ([]byte, error) {
	return bindataRead(
		_dataCode_of_conductMd,
		"data/CODE_OF_CONDUCT.md",
	)
}

func dataCode_of_conductMd() (*asset, error) {
	bytes, err := dataCode_of_conductMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CODE_OF_CONDUCT.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataContributingMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x4d\x6a\x2b\x31\x10\x84\xf7\x7d\x8a\x82\xb7\xb6\x78\xe3\xfc\x6f\x33\x4e\x82\x37\x36\x04\x7b\x6d\x14\xa9\xad\x11\xb6\xd4\x63\xb5\x84\xc9\x2e\x77\xc8\x0d\x73\x92\xe0\x81\x84\x6c\x3f\xbe\x6e\xaa\xea\x1f\x7a\xc9\xb5\xc4\xb7\x56\x63\x0e\x44\x9d\x01\xf6\x52\x0e\x34\x37\x40\x61\xeb\xd1\xaf\x57\x9b\xd7\xe5\xe3\x76\xb3\x5c\xbd\x98\xe4\x61\xf3\x85\x2d\x9e\x76\xeb\xe7\x5d\xbf\x5e\x2d\xb6\xfd\xc6\x24\x4f\x57\x17\xbf\x65\xd4\x81\x51\x59\xab\xd2\xb5\x01\x42\x91\xc3\x84\x9c\x78\xa6\x1b\x03\xb8\xc2\xb6\x32\x6c\x46\x54\x6d\x4c\xb7\x06\x48\xf6\xc0\x50\x49\x0c\x37\xd8\x1c\x58\xe9\xce\x00\xe7\x12\x2f\x22\x82\x88\x87\x93\x94\x62\x45\x62\x55\x1b\x98\xee\xff\x7c\xc2\xd8\x8e\x47\x14\x3e\x35\xd6\x4a\x0f\x53\x6e\x1d\x39\x7b\x54\xf9\x39\x50\xea\xfe\x1b\xe8\xa9\x59\x1d\xa6\x06\x21\x56\x8c\x4d\x07\x7c\x7d\x7c\xee\xa5\x38\x9e\x9d\x63\x1d\x66\x47\xb6\xca\xd4\x75\x06\xca\x8c\x77\x69\x05\x8e\x7f\x07\x92\x8c\xc4\x25\xb0\xa7\x6e\x6e\x30\x16\xd1\x91\x0b\x7d\x07\x00\x00\xff\xff\x4f\xd3\x31\x72\x43\x01\x00\x00"

func dataContributingMdBytes() ([]byte, error) {
	return bindataRead(
		_dataContributingMd,
		"data/CONTRIBUTING.md",
	)
}

func dataContributingMd() (*asset, error) {
	bytes, err := dataContributingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/CONTRIBUTING.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIssue_templateMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\x08\xc8\x49\x4d\x2c\x4e\x55\x48\x4a\x55\x48\x49\x2d\x49\xcc\xcc\x49\x4d\x51\xd0\xd5\xb5\xe3\x02\x04\x00\x00\xff\xff\x3a\x1e\xff\x9d\x1c\x00\x00\x00"

func dataIssue_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_dataIssue_templateMd,
		"data/ISSUE_TEMPLATE.md",
	)
}

func dataIssue_templateMd() (*asset, error) {
	bytes, err := dataIssue_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ISSUE_TEMPLATE.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataLicense = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x4b\x8e\xe3\x36\x10\xdd\xeb\x14\x0f\xbd\x4a\x00\xa5\xf3\x59\x05\xd9\xb1\x25\xda\x22\x22\x93\x06\x45\x8f\xe3\x25\x2d\xd1\x2d\x26\x32\x69\x88\x74\x0c\x1f\x29\xd7\xc8\xc9\x82\x92\xdd\x33\x99\x59\x09\x62\xd5\xfb\x56\x15\x2f\xf7\xd9\xbf\x8f\x19\xff\xfe\x83\x5f\x7e\xfa\xf9\x57\x1c\xef\xd8\xd8\xf9\x2f\xb0\xbb\x9b\x53\x51\x6c\xdd\x7c\xf6\x29\xf9\x18\xe0\x13\x46\x37\xbb\xe3\x1d\xef\xb3\x0d\xd9\x0d\x25\x4e\xb3\x73\x88\x27\xf4\xa3\x9d\xdf\x5d\x89\x1c\x61\xc3\x1d\x17\x37\xa7\x18\x10\x8f\xd9\xfa\xe0\xc3\x3b\x2c\xfa\x78\xb9\x17\xf1\x84\x3c\xfa\x84\x14\x4f\xf9\x66\x67\x07\x1b\x06\xd8\x94\x62\xef\x6d\x76\x03\x86\xd8\x5f\xcf\x2e\x64\x9b\x49\xef\xe4\x27\x97\xf0\x5d\x1e\x1d\x5e\xba\x27\xe2\xe5\xfb\x45\x64\x70\x76\x2a\x7c\x00\xcd\x3e\x46\xb8\xf9\x3c\xc6\x6b\xc6\xec\x52\x9e\x7d\x4f\x1c\x25\x7c\xe8\xa7\xeb\x40\x1e\x3e\xc6\x93\x3f\xfb\xa7\x02\xc1\x97\xf4\xa9\xc8\x11\xd7\xe4\xca\xc5\x67\x89\x73\x1c\xfc\x89\xbe\x6e\x89\x75\xb9\x1e\x27\x9f\xc6\x12\x83\x27\xea\xe3\x35\xbb\x12\x89\x1e\x7b\x17\x08\x65\xc3\xf0\x63\x9c\x91\xdc\x34\x15\x7d\xbc\x78\x97\xb0\x64\xfd\xe2\x6e\xd9\x21\xeb\x17\x2a\x34\x3f\x2b\x4a\xf4\x72\x1b\xe3\xf9\xeb\x24\x3e\x15\xa7\xeb\x1c\x7c\x1a\xdd\x82\x19\x22\x52\x5c\x14\xff\x74\x7d\xa6\x17\x5a\x3f\xc5\x69\x8a\x37\x8a\xd6\xc7\x30\x78\x4a\x94\x7e\x2b\x0a\x33\x3a\xd8\x63\xfc\xdb\x2d\x59\x1e\xc7\x0d\x31\xfb\xfe\x51\xf7\x72\x80\xcb\x97\xab\x3e\x47\x69\xb4\xd3\x84\xa3\x7b\x16\xe6\x06\xf8\x00\xfb\xbf\x38\x33\xc9\xa7\x6c\x43\xf6\x76\xc2\x25\xce\x8b\xde\xb7\x31\x5f\x8b\xc2\x34\x1c\x9d\x5a\x99\x3d\xd3\x1c\xa2\xc3\x56\xab\x4f\xa2\xe6\x35\x5e\x58\x07\xd1\xbd\x94\xd8\x0b\xd3\xa8\x9d\xc1\x9e\x69\xcd\xa4\x39\x40\xad\xc0\xe4\x01\xbf\x0b\x59\x97\xe0\x7f\x6c\x35\xef\x3a\x28\x5d\x88\xcd\xb6\x15\xbc\x2e\x21\x64\xd5\xee\x6a\x21\xd7\x78\xdb\x19\x48\x65\xd0\x8a\x8d\x30\xbc\x86\x51\x20\xc1\x27\x95\xe0\x1d\x91\x6d\xb8\xae\x1a\x26\x0d\x7b\x13\xad\x30\x87\xb2\x58\x09\x23\x89\x73\xa5\x34\x18\xb6\x4c\x1b\x51\xed\x5a\xa6\xb1\xdd\xe9\xad\xea\x38\x98\xac\x21\x95\xfc\x41\xc8\x95\x16\x72\xcd\x37\x5c\x9a\x57\x08\x09\xa9\xc0\x3f\x71\x69\xd0\x35\xac\x6d\x49\xab\x60\x3b\xd3\x28\x4d\x06\x51\xa9\xed\x41\x8b\x75\x63\xd0\xa8\xb6\xe6\xba\xc3\x1b\x47\x2b\xd8\x5b\xcb\x1f\x5a\xf2\x80\xaa\x65\x62\x53\xa2\x66\x1b\xb6\xe6\x0b\x4a\x99\x86\xeb\x82\xd6\x1e\xf6\xb0\x6f\x38\x3d\x91\x1e\x93\x60\x95\x11\x4a\x52\x8e\x4a\x49\xa3\x59\x65\x4a\x18\xa5\xcd\x67\xe8\x5e\x74\xbc\x04\xd3\xa2\xa3\x46\x56\x5a\x6d\xca\x82\xfa\x54\x2b\x5a\x11\x92\x70\x92\x3f\x58\xa8\x6b\x7c\x75\x12\xa5\x97\xff\x5d\xc7\x3f\x13\xa2\xe6\xac\x15\x72\xdd\x11\x98\x22\x7e\x2c\xbf\x16\xff\x05\x00\x00\xff\xff\x44\x96\xf2\x19\x21\x04\x00\x00"

func dataLicenseBytes() ([]byte, error) {
	return bindataRead(
		_dataLicense,
		"data/LICENSE",
	)
}

func dataLicense() (*asset, error) {
	bytes, err := dataLicenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/LICENSE", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPull_request_templateMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\xd4\xd5\x55\x08\xc8\x49\x4d\x2c\x4e\x55\x28\x49\xcd\xc9\x51\x48\x2d\x4b\x2d\xaa\xcc\xcf\x4b\x55\x88\x0f\xcf\xa8\xb4\x8f\x57\x48\xcc\x4b\x51\x28\xc9\x48\xcd\x53\x48\xad\x28\xc8\x49\xcc\xcc\x03\x71\x40\x72\x89\x25\xf6\xf1\x0a\xba\xba\x76\x5c\x80\x00\x00\x00\xff\xff\xf3\x07\xdd\xd2\x42\x00\x00\x00"

func dataPull_request_templateMdBytes() ([]byte, error) {
	return bindataRead(
		_dataPull_request_templateMd,
		"data/PULL_REQUEST_TEMPLATE.md",
	)
}

func dataPull_request_templateMd() (*asset, error) {
	bytes, err := dataPull_request_templateMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/PULL_REQUEST_TEMPLATE.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReadmeMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xd1\x6e\xdb\xb8\x12\x7d\xe7\x57\x4c\xeb\x87\xfb\x22\xcb\x49\x93\x87\xdb\x14\xbd\x40\xae\xeb\xb6\xb9\x68\x93\x20\x71\x70\xb1\x30\x8c\x78\x24\x8e\x25\xae\x29\x52\x4b\x8e\xec\x7a\xb1\x0f\xfb\x11\xfb\x85\xfb\x25\x8b\xa1\xac\xd6\x45\xb7\x29\xb0\x79\x08\x4c\xce\xcc\x99\xd1\x99\xc3\x21\x47\x70\x7b\x77\xf3\xbf\xd9\x74\xae\xd4\x7f\xa0\xb0\x5d\x28\x94\x5a\x3c\x5b\xdc\x51\xeb\x03\xc3\x14\x83\x5e\x2e\x8a\xd3\x62\x29\xff\xed\x12\x7e\x83\xc5\xb3\xc5\x3b\xaf\x7d\xb9\x5c\x14\x2f\xd2\xf6\x8b\x61\xfb\x8e\x2c\x61\xa4\xe5\xa2\x38\x4b\x86\x33\x31\x08\xd8\x3d\x63\x61\xac\xe1\xfd\x05\xcc\x3e\xb5\x14\x4c\x43\x8e\xd1\x2e\x17\xc5\x79\x72\x3c\xb7\x4b\xa5\x2e\xa1\xc5\x80\x55\xc0\xb6\x86\xd2\x3b\x46\xe3\x8c\xab\x40\x13\xa3\xb1\x11\xd0\xc5\x1d\x05\xe3\xaa\x0c\x8c\x83\x8a\x1c\x05\xb4\xc0\x14\x9a\xf8\x0a\x76\xb5\xcf\x60\x57\x23\x67\x6a\x57\x53\xa0\xc3\x02\x76\xf5\x3e\x03\x74\x1a\x6a\xbf\xcb\x95\x1a\x8d\xe0\x21\x62\x45\x4a\xcd\x3e\x61\xd3\x5a\x8a\xe0\xd7\x62\x03\xf6\xd0\x45\x02\xae\x09\xda\xe0\x7f\xa6\x92\x73\x78\xeb\x03\x50\xef\xf7\x0a\x4a\xdf\x34\x02\x64\x8d\x23\x30\xae\xed\x58\x4a\xd2\xca\x77\x2c\xbf\x73\xa5\x56\xab\x55\xac\xc9\x5a\x75\x00\x80\xc5\x78\xbc\xb6\x58\x9d\x2c\xe5\x17\x86\xea\xe4\xf5\x16\x6d\x47\x4b\x48\xab\xd3\xd7\x81\x7e\xe9\x4c\x20\xfd\x39\x60\x3c\xae\xc9\xb6\x02\xf4\x37\x68\xda\x53\x04\xae\x4d\x54\xaa\xf7\x83\xe1\x2f\xd6\x9e\xa0\x4b\xdf\x75\xc8\x38\x58\x7c\xcb\xc6\x3b\xb4\x17\x10\xb9\x5b\xaf\x01\x0b\xdf\x31\x24\x17\x75\x28\x49\xd3\x1a\x3b\xcb\xdf\x71\x15\x17\x75\x28\xf7\x79\x32\x3c\x87\xa1\xec\x6f\x3c\x4f\xfb\xca\x47\x23\xb8\x72\x91\xd1\x5a\x14\x48\xa5\xa6\xde\x45\x13\x85\xb5\xc8\xa1\x2b\x65\x13\xbc\x3b\x70\x4d\x6b\x0a\xa4\xa1\x21\x74\xa9\x19\xe6\x28\x34\x87\x5b\x0a\x35\xb6\x11\x76\x86\x6b\x85\x96\x29\x38\x64\xb3\xa5\xaf\xf8\x2e\x02\xed\x86\x38\x68\x6b\x63\x7d\xa4\xb0\x9e\x30\xb6\x93\x03\x79\x7d\x61\x3e\x1c\x05\x55\x1e\x2a\x62\xa8\x0c\xd7\x5d\x91\x97\xbe\x99\x7c\x89\xfc\x2a\x6a\x34\x82\xa9\x77\x1c\x4c\xd1\xb1\x71\x95\x52\x63\x88\x44\x80\x36\x7a\x58\x4d\x6f\xae\xe7\x77\x57\xff\x7d\x98\x5f\x5d\xbf\xcb\x1b\xbd\x4a\x5a\x5b\x4d\x6f\xde\xcc\x1e\xfd\xdb\xc7\xe9\xcd\xf5\x9b\x87\xe9\x5c\x0c\x82\x33\x82\x39\xc5\x1e\x63\xb6\xa5\xb0\xe7\x5a\xf4\x8d\x49\xec\x09\x9e\x02\x38\x22\x1d\x45\x8d\x1b\xd7\xab\x32\x74\xee\x58\x95\xff\x8a\xc0\x14\x45\x6f\x57\xae\xb4\x9d\x4e\x14\xa6\x8e\x44\xc3\x14\x33\x68\x70\x43\xc0\x18\x37\x31\x83\xd8\xb5\xe9\x10\xc7\x32\x98\x96\x63\x26\xe2\xe5\x0c\x22\xef\x2d\x65\xd0\x39\xc3\x4a\xea\x35\x8e\xa9\x0a\x89\xf1\x01\x5c\xdd\x06\xbf\x35\x9a\x06\xfd\xa7\xd6\x48\x19\x62\x87\x75\xc0\x86\x76\x3e\x6c\xb2\x7e\x6d\xdc\xd6\x97\x29\x3e\x83\x2a\x10\xb9\x44\x83\x28\x3b\x99\x03\xc5\xce\x72\xcc\xe1\x52\x38\x6b\x3f\x23\xb7\x54\x72\x8a\x4a\xe8\x47\x2c\xc4\xbc\xa7\xeb\x86\x6b\x0a\xa9\x03\x1f\x4c\x49\x2e\x92\x52\xf3\xda\xc4\x81\x0b\x30\x12\xd8\xeb\x87\x3d\xec\x7d\x07\x9d\xd3\x14\x00\x1d\x7c\xbc\x9a\x83\xed\x83\xf2\xa1\x65\x52\xff\xea\xc3\xd5\x74\x76\x7d\x3f\x5b\xc1\xda\x58\x4a\xd8\x97\xa2\xdf\x43\x7f\x6a\x82\xdb\x43\xf3\xd5\x58\x34\xd5\x9a\x9e\x18\x35\x86\x32\x90\x36\x1c\xd5\x18\x8e\x85\xf8\x25\xf0\xb2\xe3\x5a\x24\xf6\x11\xc3\x46\x4a\x43\xa8\xbb\x06\x1d\x14\x64\x5c\x95\xc3\x7b\x02\x2b\x01\x32\xbd\x66\xba\xf1\x4e\xc7\x0c\x10\x62\x23\xaa\x65\xbf\x73\x62\xf8\x3f\x46\x11\x05\x7b\xa7\xee\x19\x99\xfe\xfc\xfd\x8f\x07\x67\x98\x34\xa4\x65\x22\xea\xb2\xa1\x60\x4a\xcc\xe1\xbd\x89\x50\xfb\x86\x06\x4a\x63\xfa\x42\xd4\x5b\x74\x8c\x55\xef\x8c\xaa\x0a\x84\x0c\xa5\xe1\x7d\xea\xca\x90\xb1\xf4\x28\x07\xe6\x73\x66\x84\x40\x95\x28\xc0\x51\x64\x4b\x1a\x0a\xe2\x9d\xb4\xb2\xf1\x5d\x9a\xc5\x2a\xa0\xab\x44\x61\xda\x48\x32\x0d\xc5\x3e\xe5\xbb\x47\x6b\x62\x0d\xf7\x84\xd9\x90\x80\x82\xe9\xb3\xaf\x03\xc5\x7a\x87\x22\x6c\x8b\x1b\xea\x27\x66\x30\x5b\x69\x31\x24\x9e\x84\x12\x51\x20\x5c\x31\xda\x3d\xac\x7d\x00\x84\x3d\x61\x90\x3d\x81\x27\x0c\x76\x0f\xa7\x2f\xff\x7d\x92\xa2\x65\x7b\xde\x85\x0d\xed\xd5\xf7\x7d\x5f\x9e\xc4\xc4\x37\x61\x70\x24\x15\x69\x12\x59\x8a\x5b\xeb\xad\x61\x53\xa2\x85\x58\x1a\x72\x25\x29\xe4\xd4\xbd\x07\x97\xca\x4a\x34\x31\x5c\xda\x02\xdd\x3e\xeb\x59\x3f\xb6\xf9\x35\x5c\xd3\x0e\x7e\xf2\x61\x93\xc3\xdc\x6b\xdc\x43\x4d\x4a\xce\x42\x94\x99\x56\x5a\xdf\xe9\x71\x2f\x0d\xb9\x32\xda\x34\x33\x80\xa9\xac\x9d\xb7\xbe\x32\x7d\xff\xef\x09\x99\x2d\xc1\xc3\xfd\x65\xae\xd4\xa3\xe4\xdf\x1a\xda\x45\x39\x14\x81\x62\x24\x0d\x72\x8b\x01\x06\x02\x11\xbc\xdf\xb9\x5c\xaa\xdc\xa7\x1d\xe7\x19\xc8\x69\x1f\x22\xe9\x0c\xb0\x95\xf6\x93\xce\x94\x0f\x10\x48\x70\xfa\xe6\xa0\xdb\x83\x97\x13\x04\x2d\x85\x28\x33\x37\x80\x0f\x15\x3a\xf3\x6b\x3f\x5d\x1f\x95\x4a\x37\xfb\x05\xd4\xcc\x6d\xbc\x98\x4c\x2a\x1f\xd2\xb5\x5f\x62\xd0\x69\x26\x16\xa8\x2b\x9a\x3c\x39\x24\xd3\xb3\xe0\x09\x88\x7e\xf9\x23\x8c\x17\xc7\x65\x98\xa6\xca\x63\x6d\xc8\xea\x98\x1b\x3f\x14\x21\x6f\x8e\x71\x7f\x5f\xb8\x92\xc6\x85\xed\x28\x8f\xdb\x4a\xa5\x07\x48\x1f\x9c\xf2\x6b\x5f\xe6\x3e\x54\x3f\xca\x78\xf6\x44\xc6\x3e\x74\x12\xfa\xf7\xcc\xb7\xe1\x87\xbc\x67\x5f\x7d\xf8\x13\xe9\x06\xa4\x38\xb1\x72\x8a\x25\xfd\xf9\x71\xfa\x06\xa3\x3c\x64\x8c\xd3\x31\x3f\xe0\x18\x3f\x89\xc3\xab\x69\x42\x47\x8f\xa6\x43\xee\x73\xfb\x4f\xe3\x6b\x6e\xac\xfa\x2b\x00\x00\xff\xff\x86\x14\x0a\x75\xf6\x09\x00\x00"

func dataReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_dataReadmeMd,
		"data/README.md",
	)
}

func dataReadmeMd() (*asset, error) {
	bytes, err := dataReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/README.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _data_configYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xc9\x48\xcd\x4d\xb5\x52\xc8\x4a\xcd\xae\xcc\xc9\xd1\x05\xf3\x74\x13\x8b\x92\x33\x32\x4b\x52\x93\x4b\x00\x01\x00\x00\xff\xff\x7a\x86\xdc\x61\x1d\x00\x00\x00"

func data_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_data_configYml,
		"data/_config.yml",
	)
}

func data_configYml() (*asset, error) {
	bytes, err := data_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/_config.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexMd = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\xc1\x6e\x1b\x47\x0f\xbe\xcf\x53\x30\xd1\xe1\xbf\xac\x56\x76\x7c\xf9\x93\x20\x05\x5c\xc5\x49\x5c\x24\xb6\x61\xcb\x28\x0a\x41\xb0\xa8\x1d\x6a\x77\xaa\xd9\x99\x2d\x87\x2b\x55\x45\x0f\x7d\x88\x3e\x61\x9f\xa4\xe0\xac\x94\x38\x48\x93\xe8\x20\xec\x0c\xc9\x8f\xdc\x8f\xdf\x70\x76\x04\x37\xb7\xd7\x3f\x5d\x4c\x67\xc6\xfc\x00\x2b\xdf\xf3\xca\x98\xf9\x93\xf9\x2d\x75\x91\x05\xa6\xc8\x76\x31\x5f\x9d\x2e\xf4\xcf\x2f\xe0\x4f\x98\x3f\x99\xbf\x8d\x36\x56\x8b\xf9\xea\x99\xee\x3e\x3b\xee\xde\x92\x27\x4c\xb4\x98\xaf\xce\x74\xff\xcc\x2f\x8c\x39\x87\x0e\x19\x6b\xc6\xae\x81\x2a\x06\x41\x17\x5c\xa8\xc1\x92\xa0\xf3\x09\x30\xa4\x1d\xb1\x0b\x75\x01\x2e\x40\x4d\x81\x18\x3d\x08\x71\x9b\x5e\xc2\xae\x89\x05\xec\x1a\x94\xc2\xec\x1a\x62\x3a\x2c\x60\xd7\xec\x0b\xc0\x60\xa1\x89\xbb\xd2\x98\xd1\x08\xee\x13\xd6\x64\xcc\xc5\xef\xd8\x76\x9e\x12\xc4\xb5\xda\x40\x22\xf4\x89\x40\x1a\x82\x8e\xe3\xaf\x54\x49\x09\x6f\x22\x03\x0d\x7e\x2f\xa1\x8a\x6d\xab\x40\xde\x05\x02\x17\xba\x5e\xb4\x24\x6b\x62\x2f\xfa\x5c\x1a\xb3\x5c\x2e\x53\x43\xde\x9b\x03\x00\xcc\xc7\xe3\xb5\xc7\xfa\x64\xa1\x4f\xc8\xf5\xc9\xab\x2d\xfa\x9e\x16\x90\x57\xa7\xaf\x98\x7e\xeb\x1d\x93\xfd\x18\x30\x1e\x37\xe4\x3b\x05\xfa\x0f\x34\x1b\x29\x81\x34\x2e\x19\x33\xf8\xc1\xf1\x97\x9a\x48\xd0\xe7\xf7\x3a\x64\x3c\x5a\x62\x27\x2e\x06\xf4\x2f\x20\x49\xbf\x5e\x03\xae\x62\x2f\x90\x5d\xcc\xa1\x24\x4b\x6b\xec\xbd\x7c\xc5\x55\x5d\xcc\xa1\xdc\xa7\xd9\xf0\x14\x8e\x65\x7f\xe1\x79\x3a\x54\x3e\x1a\xc1\x65\x48\x82\xde\xa3\x42\x1a\x33\x8d\x21\xb9\xa4\xac\x25\xe1\xbe\xd2\x4d\x88\xe1\xc0\x35\xad\x89\xc9\x42\x4b\x18\x72\x33\xdc\xa3\xd0\x12\x6e\x88\x1b\xec\x12\xec\x9c\x34\x06\xbd\x10\x07\x14\xb7\xa5\xcf\xf8\x5e\x31\xed\x8e\x71\xd0\x35\xce\xc7\x44\xbc\x9e\x08\x76\x93\x03\x79\x43\x61\x91\x1f\x05\xd5\x11\x6a\x12\xa8\x9d\x34\xfd\xaa\xac\x62\x3b\xf9\x14\xf9\x59\xd4\x68\x04\xd3\x18\x84\xdd\xaa\x17\x17\x6a\x63\xc6\x90\x88\x00\x7d\x8a\xb0\x9c\x5e\x5f\xcd\x6e\x2f\x7f\xbc\x9f\x5d\x5e\xbd\x2d\x5b\xbb\xcc\x5a\x5b\x4e\xaf\x5f\x5f\x3c\xc4\x37\x0f\xd3\xeb\xab\xd7\xf7\xd3\x99\x1a\x14\x67\x04\x33\x4a\x03\xc6\xc5\x96\x78\x2f\x8d\xea\x1b\xb3\xd8\x33\x3c\x31\x04\x22\x9b\x54\x8d\x9b\x30\xa8\x92\xfb\xf0\x58\x95\xff\x4b\x20\x94\x54\x6f\x97\xa1\xf2\xbd\xcd\x14\xe6\x8e\x24\x27\x94\x0a\x68\x71\x43\x20\x98\x36\xa9\x80\xd4\x77\xf9\x60\xa6\x8a\x5d\x27\xa9\x50\xf1\x4a\x01\x49\xf6\x9e\x0a\xe8\x83\x13\xa3\xf5\xba\x20\x54\x73\x66\xfc\x08\x6e\x6e\x38\x6e\x9d\xa5\xa3\xfe\x73\x6b\xb4\x0c\xb5\xc3\x9a\xb1\xa5\x5d\xe4\x4d\x31\xac\x5d\xd8\xc6\x2a\xc7\x17\x50\x33\x51\xc8\x34\xa8\xb2\xb3\x99\x29\xf5\x5e\x52\x09\xe7\xca\x59\xf7\x11\xb9\xa3\x4a\x72\x54\x46\x7f\xc4\x42\x2a\x07\xba\xae\xa5\x21\xce\x1d\x78\xef\x2a\x0a\x89\x8c\x99\x35\x2e\x1d\xb9\x00\xa7\x81\x83\x7e\x24\xc2\x3e\xf6\xd0\x07\x4b\x0c\x18\xe0\xc3\xe5\x0c\xfc\x10\x54\x1e\x5b\xa6\xf5\x2f\xdf\x5f\x4e\x2f\xae\xee\x2e\x96\xb0\x76\x9e\x32\xf6\xb9\xea\xf7\xd0\x9f\x86\xe0\xe6\xd0\x7c\x33\x56\x4d\x75\x6e\x20\xc6\x8c\xa1\x62\xb2\x4e\x92\x19\xc3\x63\x21\x7e\x0a\x3c\xef\xa5\x51\x89\x7d\x40\xde\x68\x69\x08\x4d\xdf\x62\x80\x15\xb9\x50\x97\xf0\x8e\xc0\x6b\x80\x4e\xaf\x0b\xdb\xc6\x60\x53\x01\x08\xa9\x55\xd5\x4a\xdc\x05\x35\xfc\x8c\x49\x45\x21\x31\x98\x3b\x41\xa1\x7f\xfe\xfa\xfb\x3e\x38\x21\x0b\x79\x99\x89\x3a\x6f\x89\x5d\x85\x25\xbc\x73\x09\x9a\xd8\xd2\x91\xd2\x94\xdf\x10\xed\x16\x83\x60\x3d\x38\xa3\xa9\x99\x50\xa0\x72\xb2\xcf\x5d\x39\x66\xac\x22\xea\x81\xf9\x98\x19\x81\xa9\x56\x05\x04\x4a\xe2\xc9\xc2\x8a\x64\xa7\xad\x6c\x63\x9f\x67\xb1\x61\x0c\xb5\x2a\xcc\x3a\x4d\x66\x61\xb5\xcf\xf9\xee\xd0\xbb\xd4\xc0\x1d\x61\x71\x4c\x40\xec\x86\xec\x6b\xa6\xd4\xec\x50\x85\xed\x71\x43\xc3\xc4\x64\xb7\xd5\x16\x43\xe6\x49\x29\x51\x05\xc2\xa5\xa0\xdf\xc3\x3a\x32\x20\xec\x09\x59\xf7\x14\x9e\x90\xfd\x1e\x4e\x9f\xff\xff\x24\x47\xeb\xf6\xac\xe7\x0d\xed\xcd\xd7\x7d\x9f\x9f\xa4\xcc\x37\x21\x07\xd2\x8a\x2c\xa9\x2c\xd5\xad\x8b\xde\x89\xab\xd0\x43\xaa\x1c\x85\x8a\x0c\x4a\xee\xde\x7d\xc8\x65\x65\x9a\x04\xce\xfd\x0a\xc3\xbe\x18\x58\x7f\x6c\x8b\x6b\xb8\xa2\x1d\xfc\x12\x79\x53\xc2\x2c\x5a\xdc\x43\x43\x46\xcf\x42\xd2\x99\x56\xf9\xd8\xdb\xf1\x20\x0d\xbd\x32\xba\x3c\x33\x40\xa8\x6a\x42\xf4\xb1\x76\x43\xff\xef\x08\x45\x3c\xc1\xfd\xdd\x79\x69\xcc\x83\xe6\xdf\x3a\xda\x25\x3d\x14\x4c\x29\x91\x05\xbd\xc5\x00\x99\x40\x05\x1f\x77\xa1\xd4\x2a\xf7\x79\x27\x44\x01\x0a\x36\x72\x22\x5b\x00\x76\xda\x7e\xb2\x85\x89\x0c\x4c\x8a\x33\x34\x07\xc3\x1e\xa2\x9e\x20\xe8\x88\x93\xce\x5c\x86\xc8\x35\x06\xf7\xc7\x30\x5d\x1f\x8c\xd1\xdb\xfa\x05\x34\x22\x5d\x7a\x31\x99\xd4\x91\xf3\x4d\x5e\x21\xdb\x3c\x12\x57\x68\x6b\x9a\x7c\x73\x46\xe6\xab\xfe\x1b\x10\xc3\xf2\x7b\x18\xcf\x1e\x41\xb8\xb6\x2e\x53\xe3\xc8\xdb\x54\xba\x78\xac\x41\x3f\x23\xc6\xc3\x6d\x11\x2a\x1a\xaf\x7c\x4f\x65\xda\xd6\x26\x7f\x54\x0c\xc1\x39\xbd\x8d\x55\x19\xb9\xfe\x5e\xc2\xb3\xaf\x27\x1c\x22\x27\x3c\x7c\xa2\x7c\x19\x7d\x48\x7b\xf6\xd9\x6b\x7f\x23\xdb\x11\x29\x4d\xbc\x1e\x61\x31\xff\x06\x00\x00\xff\xff\xf9\x4b\xe6\xe3\x46\x09\x00\x00"

func dataIndexMdBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexMd,
		"data/index.md",
	)
}

func dataIndexMd() (*asset, error) {
	bytes, err := dataIndexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.md", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.gitignore": dataGitignore,
	"data/CHANGELOG.md": dataChangelogMd,
	"data/CODE_OF_CONDUCT.md": dataCode_of_conductMd,
	"data/CONTRIBUTING.md": dataContributingMd,
	"data/ISSUE_TEMPLATE.md": dataIssue_templateMd,
	"data/LICENSE": dataLicense,
	"data/PULL_REQUEST_TEMPLATE.md": dataPull_request_templateMd,
	"data/README.md": dataReadmeMd,
	"data/_config.yml": data_configYml,
	"data/index.md": dataIndexMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{dataGitignore, map[string]*bintree{}},
		"CHANGELOG.md": &bintree{dataChangelogMd, map[string]*bintree{}},
		"CODE_OF_CONDUCT.md": &bintree{dataCode_of_conductMd, map[string]*bintree{}},
		"CONTRIBUTING.md": &bintree{dataContributingMd, map[string]*bintree{}},
		"ISSUE_TEMPLATE.md": &bintree{dataIssue_templateMd, map[string]*bintree{}},
		"LICENSE": &bintree{dataLicense, map[string]*bintree{}},
		"PULL_REQUEST_TEMPLATE.md": &bintree{dataPull_request_templateMd, map[string]*bintree{}},
		"README.md": &bintree{dataReadmeMd, map[string]*bintree{}},
		"_config.yml": &bintree{data_configYml, map[string]*bintree{}},
		"index.md": &bintree{dataIndexMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

